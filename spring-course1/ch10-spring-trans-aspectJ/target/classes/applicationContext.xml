<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
 ">
    <!--类路径下找指定的位置-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--声明数据源DataSource , 作用是连接数据库的-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--set注入给DruidDataSource提供连接数据库信息-->
        <property name="url" value="${jdbc.url}"/> <!--setUrl()-->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxAt}"/>
    </bean>

    <!--声明的是mybatis中提供的sqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入 , 捌数据库连接池赋给DataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!--mybatis主配置文件的位置
         configLocation属性是Resource类型 , 读取配置文件
         他的赋值 , 使用value , 指定文件的路径 , 使用classpath:表示文件的位置
      -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--创建dao对象 , 使用SqlSession的getMapper(StudentDao.class)-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定的SqlSessionFactory对象的id , 因为sqlSessionFactoryBeanName是String类型的所以是简单类型的他的值应该用value-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定包名 , 包名是dao接口所在的包名.
          MapperScannerConfigurer会扫描这个包中的所有接口 , 把每个接口都执行一次
          getMapper()方法 , 得到每个接口的到对象.
          创建好的dao对象放入非spring的容器中的. (如果多个包可以用" , "分隔开)
          dao对象的默认名称是 接口名首字母小写.
      -->
        <property name="basePackage" value="com.lypowernode.dao"/>
    <!--声明service-->
    </bean>
    <bean id="buyGoodsService" class="com.lypowernode.service.impl.BuyGoodsServiceImpl">
        <property name="saleDao" ref="saleDao"/>
        <property name="goodsDao" ref="goodsDao"/>
    </bean>

    <!--声明事务管处理 : 和源代码分离的-->
    <!--1. 声明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--连接的数据库 , 指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!--2. 声明业务方法他的事务属性(隔离级别 , 传播行为 , 超时时间)
           id : 自定义名称 , 表示 <txadvice> 和 </tx:advice>之间的配置内容的
           transavtion-manager :事务管理对象的id
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <!--<tx:attributes>表示 : 配置事务属性-->
        <tx:attributes>
            <!--<tx:method name=""/> : 给具体的方法配置事务属性 , method可以有多个 , 分别给不同的方法设置事务属性
                name : 方法名称 , 1). 完整的方法名称 , 不带有包和类.
                                2).  方法可以使用通配符 , * 表示任意字符
                                propagation : 传播行为 , 枚举值
                                isolation : 隔离级别
                                rollbackFor : 你指定的异常类名 , 全限定类名. 发生异常一定回滚
             -->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException,com.lypowernode.exception.NotEnoughException"/>
            <!--使用通配符 , 指定很多方法-->
            <!--指定添加方法           传播行为  :    每次都需要新的事物   隔离级别 ,异常默认 .
                                        ↓             ↓        -->
            <tx:method name="add*" propagation="REQUIRES_NEW"/>
            <!--指定修改方法-->
            <tx:method name="modify*"/>
            <!--指定删除方法-->
            <tx:method name="remove*"/>
            <!--指定查询方法 , query , search , find-->
            <tx:method name="" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!--
            配置切入点表达式 ：　指定那些包中的类　，　要使用事务
            id : 切入点表达式的名称 , 唯一值
            expression : 切入点表达式 , 指定哪些类要使用事务 , aspectj会创建代理对象

      -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器 : 关联advice和pointcut-->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>
